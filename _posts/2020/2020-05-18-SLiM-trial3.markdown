---
layout: post
title: SLiM 3
date: '2020-05-28 12:00'
tags:
  - SLiM
categories:
  - SLiM
---

In this post I will continue work on the SLiM simulation for DelBay19 project. The key question in this post is how to simulate a selection process in the model. This can be done by using the nonWF model and the viability selection within generation. Agian, the notes are listed below.

Some useful notes:     
1) SLiM manual p206: it describes how the fitness is influenced by the qtl, and how to examine the phenotypes
2) 

Notes for SLiM:

Goal: to estimate power to detect delta_p for a given starting p after within-generation challenge 

1. sampling ind from pop, applying selection, sequencing & comparing n chromosomes before vs after   
2. burn in population to equilibrium   
3. subdivide population into groups of 300 - starting samples   
4. output "before" chromosomes, 2n --> mut, bin by freqs ("starting freq")   
5. apply 80% selection   
6. output "after" chromosomes, 2n --> mut, delta_p   

Questions:   
1. what % of nonneutral mutations (of a given start_p and QTL effect size) are significant at 5% level?   
2. how long of a burn in is needed to establish low LD? Use high recomb rate?   

Quant Trait Factors:   
1. s selection strength (% mortality)   
2. h heritability   
3. genetic architecture (QTL effect sizes, distribution)   
4. equilibrium LD   

Notes (from Ben):   
1. nonWF model has easier structure for sampling chromosomes before and after viability selection within gen   
2. need to empirically determine % mortality from a given selection model   
3. burn in for wild population includes neutral, so large population might require tree-seq recording   
4. selected QTL are also burning in, but that is often fast   
5. stabilizing selection often maintains very little variation at QTL at equilibrium
	- NEED wide Gaussian function   
	- or lots of small effect loci   
6. should be okay to model high recomb rates to lower eq LD, but may still need large N to get low enough LD   

---

- Notes about WF vs. nonWF models

In WF models, early() events occur just before offspring generation and late() events happen
just after, next stage is fitness evaluation. In nonWF models this positioning is reversed: early() occurs just after offspring generation, , and late() events happen just after viability selection.

WF model: early() -- late() -- fitness evaluation
nonWF model: offspring generation -- early() -- viability/survival stage -- late() event

    Viability selection in nonWF models is mechanistically simple. For a given individual, a fitness
of 0.0 or less results in certain death; that individual is immediately removed from its
subpopulation. A fitness of 1.0 or greater results in certain survival; that individual remains in its
subpopulation, and will live into the next generation cycle. A fitness greater than 0.0 and less than
1.0 is interpreted as a survival probability; SLiM will do a random draw to determine whether the
individual survives or not. The major difference about fitness bewtween WF and nonWF models are:

1) first, nonWF models fitness is absolute fitness, WF models fitness is relative fitness    
2) second, nonWF models selection is generally hard selection, reducing the size of
the population proportionate to mean population fitness; whereas in WF models it is generally soft
selection, changing the relative success of particular individuals but not changing the size of the
population.    
3) third, in nonWF models the population is not automatically regulated –
both extinction and unbounded exponential growth are very real possibilities – whereas in WF
models SLiM automatically regulates the population size.


```sh

// Keywords: nonWF, QTL, fitnessscaling
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSex("A");
	defineConstant("K", 500);
		
	initializeMutationType("m1", 0.5, "f", 0.0);  // neutral
	m1.convertToSubstitution = T;
	initializeMutationType("m2", 0.5, "n", 0.0, 1);  // QTLs
	m2.convertToSubstitution = F;
	m2.color = "red";
	
	initializeMutationRate(1e-5);
	
	//set to use a “last mutation” stacking policy, so that when a new
	//mutation occurs at a given QTL it replaces the allele that was 
	//previously at that site, rather than “stacking” with it as is
	//SLiM’s default behavior (see section 1.5.3)
	m2.mutationStackPolicy = "l";
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", m2, 1);
	
	//define how constant the QTLs are occured on the genome
	defineConstant("C", 200); // number of QTLs
	defineConstant("W", 200);  // size of neutral buffer on each side
	pos = 0;
	q = NULL;
	
	for (i in 1:C)
	{
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
		
		initializeGenomicElement(g2, pos, pos );
		q = c(q, pos);
		pos = pos + 1;
		
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
	}
	
	defineConstant("Q", q);     // remember our QTL positions

   // we want the QTLs to be unlinked; build a recombination map for that
	rates = c(rep(c(1e-8, 0.5), C-1), 1e-8);
	ends = (repEach(Q + W, 2) + rep(c(0,1), C))[0:(C*2 - 2)];
	initializeRecombinationRate(rates, ends);

	
	}
	// start reproducation callback
reproduction(NULL, "F") {
	mate = subpop.sampleIndividuals(1, sex="M");
	
	if (mate.size())
	{
		qtlValue = individual.tagF;
	//	cat(individual.tagF);
		expectedLitterSize = max(0.0, qtlValue + 5);
	//	cat(expectedLitterSize + "\n");
	// the investment is per egg but not per hatched individuals, the littlesize is removed	
	//	litterSize = rpois(1, expectedLitterSize);
		penalty = 5 / expectedLitterSize;
		for (i in seqLen(asInteger(expectedLitterSize)))
		{
			offspring = subpop.addCrossed(individual, mate);
			offspring.setValue("penalty", rgamma(1, penalty, 20));
	//		cat("Penalty: " +offspring.getValue("penalty") + "\n");
		}
	}
}
1 early() {
	sim.addSubpop("p1", 50);
	p1.individuals.setValue("penalty", 1.0);
	
}
early() {
	// non-overlapping generations
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
	inds = inds[inds.age == 0];  // focus on juveniles
	// QTL calculations
	//cat(sim.mutationsOfType(m2));
	inds.tagF = inds.sumOfMutationsOfType(m2);
	//cat(inds.tagF);
	// parental investment fitness penalties
	inds.fitnessScaling = inds.getValue("penalty");
	
	// density-dependence for juveniles
	//p1.fitnessScaling = K / sum(inds.fitnessScaling);
	p1.fitnessScaling = K / size(inds);
	
	//catn(sim.subpopulations.individuals.fitnessScaling);
}
//since this is a QTL model we need to zero out the fitness effect of the QTL mutations as usual, so that their only fitness effects are indirect p341
fitness(m2) { return 1.0; }

late() {
		// output the phenotypic mean and pop size
	   qtlValues = p1.individuals.tagF;
	   expectedSizes = pmax(0.0, qtlValues + 5);
	   //cat(expectedSizes);
	   cat(sim.generation + ": " + p1.individualCount + " individuals");
	   cat(", mean litter size " + mean(expectedSizes));
	   catn();
}
2001 early() {
   // take a sample of individuals, and then get the genomes
   
   //		catn(sim.subpopulations.individuals.fitnessScaling);
   //		catn(sim.subpopulations.individualCount);
   		
   		sampled = sample(sim.subpopulations.individuals, 300);
   		s = sampled.genomes;
   		qtl = unique(s.mutationsOfType(m2));   		
   	
   // for every QTL mutation find the frequency
		   f = sapply(qtl, "mean(s.containsMutations(applyValue));");
		
   // print the results
   		catn("\nqtl information before selection");
   		catn("qtl positions: " + paste(qtl.position, ", "));
   		catn("qtl frequencies: " + paste(f, ", "));
	//		using the fitnessScaling property to change the fitness as 0 
			catn(sampled.fitnessScaling); 
			sim.subpopulations.individuals.fitnessScaling = 0;
			
	// 	reassign the fitness of 0.4 to all sampled (300 in this case) individuals; used to simulate 20% viability selection
			sampled.fitnessScaling = 0.4;
			
			catn('Write to file. Population size: '+ p1.individualCount + '\n');
			sim.outputFull('record.txt');
			
}
2001 late() {
   // take a sample of individuals, and then get the genomes
   		s = sim.subpopulations.individuals.genomes;
   		qtl = unique(s.mutationsOfType(m2));
   // for every QTL mutation find the frequency
			f = sapply(qtl, "mean(s.containsMutations(applyValue));");	
   // print the results
   		catn("\nafter viability selection");
   		catn("qtl positions: " + paste(qtl.position, ", "));
   		catn("qtl frequencies: " + paste(f, ", "));
   		scaled_size = p1.individualCount;
   		catn('population size after selection: '+ scaled_size);	
   // this part is used to capture the qtl frequency using the same sample size after viability selection (to simulat dirft effect during sampling)
   		sim.readFromPopulationFile('record.txt');
   		catn('Read from file. Population size: '+ p1.individualCount);
   		
   		sampled = sample(sim.subpopulations.individuals, scaled_size);
   		s = sampled.genomes;
   		qtl = unique(s.mutationsOfType(m2));
			f = sapply(qtl, "mean(s.containsMutations(applyValue));");
			catn("\nsamples before viability selection, with the same sample size after selection (to simulate drift effect)");
   		catn("qtl positions: " + paste(qtl.position, ", "));
   		catn("qtl frequencies: " + paste(f, ", "));
   			
   		sim.simulationFinished();
}

```



