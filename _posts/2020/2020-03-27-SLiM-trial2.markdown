---
layout: post
title: SLiM 2
date: '2020-03-27 12:00'
tags:
  - SLiM
categories:
  - SLiM
---

While I am waiting for the job running, I decide to work on the SLiM.

Notes for SLiM:

Goal: to estimate power to detect delta_p for a given starting p after within-generation challenge 

1. sampling ind from pop, applying selection, sequencing & comparing n chromosomes before vs after   
2. burn in population to equilibrium   
3. subdivide population into groups of 300 - starting samples   
4. output "before" chromosomes, 2n --> mut, bin by freqs ("starting freq")   
5. apply 80% selection   
6. output "after" chromosomes, 2n --> mut, delta_p   

Questions:   
1. what % of nonneutral mutations (of a given start_p and QTL effect size) are significant at 5% level?   
2. how long of a burn in is needed to establish low LD? Use high recomb rate?   

Quant Trait Factors:   
1. s selection strength (% mortality)   
2. h heritability   
3. genetic architecture (QTL effect sizes, distribution)   
4. equilibrium LD   

Notes (from Ben):   
1. nonWF model has easier structure for sampling chromosomes before and after viability selection within gen   
2. need to empirically determine % mortality from a given selection model   
3. burn in for wild population includes neutral, so large population might require tree-seq recording   
4. selected QTL are also burning in, but that is often fast   
5. stabilizing selection often maintains very little variation at QTL at equilibrium
	- NEED wide Gaussian function   
	- or lots of small effect loci   
6. should be okay to model high recomb rates to lower eq LD, but may still need large N to get low enough LD   

---

In order to burin in population to equilibrium, I created 10 QTLs and tried to model quantitative phenotypic traits that are governed by these QTLs. In addition, these QTLs are modeled to be unlinked by setting the recombination rate as 0.5.

Here selection will act upon the phenotype, not upon the individual QTLs; we will therefore deal not with selection coefficients, but with QTL effect sizes. Note that the effect sizes are additive, I am ignoring non-additive effects for now.

After creating the QTLs and genomic architecture, I added a part to calculate the phenotypic trait values and fitness effects. This is done with code below,

```sh
1: late() {
	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m2);
	inds.fitnessScaling = 1.0 + dnorm(phenotype, 10.0, 5.0) * 10.0;
	inds.tagF = phenotype;
```

This code gets a vector of all individuals in the model (as inds), and sum all the QTL effect sizes of all indviduals as phenotypes.  The next line calculates fitness effects, given thoese phenotypic trait values. The dnorm() function returns the probability density for a Gaussian function at a given quantile. Here 10 is optimum of stabilizing selection on the phenotypic traits; and 5 is the standard deviation of the normal distribution. 

Next part is to check the mean phenotype. With this code, in every generation the model calculates the mean phenotype and compare it to the optimum at 10. If the difference is < 0.1, the mean phenotype reachs the optimum. The code also prints the mean phenotype every 100 generations.

I assume the population reachs equilibrium when the mean phenotype difference is less than 0.1. Then I tried to output the QTL and neutral frequencies across all the individuals in this population using the code below, 

```sh
   // get all the m2 QTL and m1 neutral mutations in the simulation
		neu = sim.mutationsOfType(m1);
		qtl = sim.mutationsOfType(m2);
		
	// then for every QTL mutation find the frequency
		f1 = sapply(neu, "mean(inds.containsMutations(applyValue));");
		f2 = sapply(qtl, "mean(inds.containsMutations(applyValue));");
		
	// print the position and frequencies of QTL before selection
		catn("\nneutral loci positions: " + paste(neu.position, ", "));
   		catn("\nneutral loci frequencies: " + paste(f1, ", "));
   		catn("\n" + "QTL positions: " + paste(qtl.position, ", "));
   		catn("QTL frequencies: " + paste(f2, ", "));
  ```
Example output:
```sh
neutral loci positions: 10256, 17471, 12992, 18316, 4954, 7801, 2420, 4222, 5220, 9956, 5307, 8128, 19199, 12521, 16272
neutral loci frequencies: 0.112, 0.069, 0.057, 0.001, 0.163, 0.007, 0.044, 0.6, 0.852, 0.026, 0.038, 0.292, 0.001, 0.654, 0.23
QTL positions: 13006, 11005
QTL frequencies: 0.717, 0.863
```
 
In order to subdivide population into groups of 300 as the starting samples, I used the code below. I also checked how the qtl frequencies are changed in the subdivided populations. The neutral loci positions and frequencies could also be printed out if needed.
```sh
   // take a sample of individuals, and then get the genomes
   		s = sample(sim.subpopulations.individuals, 300).genomes;
   		qtl = unique(s.mutationsOfType(m2));

   // for every QTL mutation find the frequency
		f = sapply(qtl, "mean(s.containsMutations(applyValue));");
		
   // print the results
   		catn("\nsubdivide population into groups of 300");
   		catn("\n" + "positions: " + paste(qtl.position, ", "));
   		catn("frequencies: " + paste(f, ", "));
```

It is still a problem to apply the 80% selection on the subdivided populations (300 samples). Same as last part, I print out the QTL position and frequencies after applying 80% selection (see output at the end of this paragraph). For now I just randonly pick up 60 samples as a function of selection. SLiM can model the population contraction (for bottleneck modeling) using the function of setSubpopulationSize(). However, it causes error during the run. Nevertheless, it sound too simple to apply strong selection in this way. I may need to check the nonWF and viability/survival selection recipes for this goal. 

```sh
subdivide population into groups of 300

positions: 13006, 11005
frequencies: 0.463333, 0.595

apply 80% selection

positions: 11005, 13006
frequencies: 0.641667, 0.458333
```

Below is the whole code:

```sh

initialize() {
	defineConstant("nSD", 5.0); // Standard Deviation of S DFE
	initializeMutationRate(1e-6);
	initializeMutationType("m1", 0.5, "f", 0.0);       // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, nSD);  // QTLs
	m2.convertToSubstitution = F;
	m2.color = "red";
	//set to use a “last mutation” stacking policy, so that when a new
	//mutation occurs at a given QTL it replaces the allele that was 
	//previously at that site, rather than “stacking” with it as is
	//SLiM’s default behavior (see section 1.5.3)
	m2.mutationStackPolicy = "l";
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", c(m1,m2), c(0.9,0.1));
	
	defineConstant("C", 10);    // number of QTLs
	defineConstant("W", 1000);  // size of neutral buffer on each side
	pos = 0;
	q = NULL;
	
	for (i in 1:C)
	{
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
		
		initializeGenomicElement(g2, pos, pos);
		q = c(q, pos);
		pos = pos + 1;
		
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
	}
	
	defineConstant("Q", q);     // remember our QTL positions

// we want the QTLs to be unlinked; build a recombination map for that
	rates = c(rep(c(1e-8, 0.5), C-1), 1e-8);
	ends = (repEach(Q + W, 2) + rep(c(0,1), C))[0:(C*2 - 2)];
	initializeRecombinationRate(rates, ends);
}


fitness(m2) { return 1.0; }
1 { sim.addSubpop("p1", 1000); }
1: late() {
	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m2);
	inds.fitnessScaling = 1.0 + dnorm(phenotype, 10.0, 5.0) * 10.0;
	inds.tagF = phenotype;
	
	// Output and check for termination
	mean_phenotype = mean(phenotype);
			
	if (abs(mean_phenotype - 10.0) < 0.1)
	{	
   // get all the m2 QTL and m1 mutations in the simulation
		neu = sim.mutationsOfType(m1);
		qtl = sim.mutationsOfType(m2);
		
	// then for every QTL mutation find the frequency
		f1 = sapply(neu, "mean(inds.containsMutations(applyValue));");
		f2 = sapply(qtl, "mean(inds.containsMutations(applyValue));");
		
	// print the position and frequencies of QTL before selection
		catn("\nneutral loci positions: " + paste(neu.position, ", "));
   	catn("\nneutral loci frequencies: " + paste(f1, ", "));
   	catn("\n" + "QTL positions: " + paste(qtl.position, ", "));
   	catn("QTL frequencies: " + paste(f2, ", "));
   	
   // take a sample of individuals, and then get the genomes
   	s = sample(sim.subpopulations.individuals, 300).genomes;
   	qtl = unique(s.mutationsOfType(m2));

   // for every QTL mutation find the frequency
		f = sapply(qtl, "mean(s.containsMutations(applyValue));");
		
   // print the results
   	catn("\nsubdivide population into groups of 300");
   	catn("\n" + "positions: " + paste(qtl.position, ", "));
   	catn("frequencies: " + paste(f, ", "));

	// apply 80% selection by randomly selecting 20% samples 	
		s1 = sample(sim.subpopulations.individuals, 60).genomes;
	// or setSubpopulationSize is a better way to do so but it causes error	
	//	s1 = s.setSubpopulationSize(60);
		qtl = unique(s1.mutationsOfType(m2));
		f = sapply(qtl, "mean(s1.containsMutations(applyValue));");
   	catn("\napply 80% selection");
   	catn("\n" + "positions: " + paste(qtl.position, ", "));
   	catn("frequencies: " + paste(f, ", "));
   
		sim.simulationFinished();
	}
	else if (sim.generation % 100 == 0)
	{
		catn(sim.generation + ": Mean phenotype == " + mean_phenotype);
	}
}

50000 late() {
	catn("\nDID NOT REACH OPTIMUM");
}

```
---

To do list:

1. perhaps add more QTLs and use the wider Gaussian function so that each QTL has a weaker effects on the fitness (for polygenic inheritance) 

2. write the code for delta_p or Fst estimates

3. find the optimal way to model the within-generation challenge. I will check the nonWF model recipes.

4. equilibrium LD


