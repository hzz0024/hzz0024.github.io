---
comments: true
title: Baypass analysis
date: '2021-04-04 12:00'
tags:
  - DelBay
  - Wild 
  - WGS
  - Baypass
categories:
  - WGS data analysis
--- 

### What is Baypass?

Baypass is a program designed to associate the adaptive differentiation to environmental variables [Baypass](http://www1.montpellier.inra.fr/CBGP/software/baypass/).   

The publication is [here](https://www.genetics.org/content/201/4/1555) And there is a good manual [here](http://www1.montpellier.inra.fr/CBGP/software/baypass/files/BayPass_manual_2.2.pdf)

### Baypass input

The pipeline for Baypass run was initially developed by [Claire MÃ©rot](https://github.com/clairemerot/selection_analysis), with some modifications. 

In terms of the Baypass input, it requires a allele count file, a popoulation information file, and an environment data file.

First is the allele count files, which is produced by Angsd and formated by Yann Dorant's [toolbox](https://gitlab.com/YDorant/Toolbox).

Here I have prepared five .mafs for the whole wild transect populations.

```sh
#############################################################################
pwd # main folder
/workdir/hz269/DelBay_all_angsd/13_env_gen_association/selection_analysis-master

cd /workdir/hz269/DelBay_all_angsd/13_env_gen_association/selection_analysis-master/02_raw_data # folder for raw maf files
ls *.mafs

ARN_maf0.05_pctind0.7_maxdepth3.mafs  
COH_maf0.05_pctind0.7_maxdepth3.mafs  
NB_maf0.05_pctind0.7_maxdepth3.mafs
HC_maf0.05_pctind0.7_maxdepth3.mafs
SR_maf0.05_pctind0.7_maxdepth3.mafs
										
###ANALYSING_MAF_SELECTION_TESTS_ETC

#############################################################################
cat cat 02_extract_format_maf.sh

###02_extract_format_maf
#or to extract maf & proceed straight to formatting maf for various analyses
#to extract maf and gather all pop maf in one file (same as above)+ format them for rda & various analysis
#it will aslo output in the list of snps for which maf was calculated in all populations (represented by the min % of IND given as filter
source 01_scripts/01_config.sh
Rscript 01_scripts/Rscripts/extract_format_maf.r "$MIN_MAF" "$PERCENT_IND" "$POP1_FILE" "$ANGSD_PATH" "$MAX_DEPTH_FACTOR"

#############################################################################
cat extract_format_maf.r

#this R script extract maf in a single file for all populations
library(dplyr)


argv <- commandArgs(T)
MIN_MAF <- argv[1]
PERCENT_IND <- argv[2]
POP<-argv[3]
ANGSD_PATH<- argv[4]
MAX_DEPTH_FACTOR<-argv[5]

#read sites files
sites<-read.table(paste0(ANGSD_PATH,"/02_raw_data/sites_all_maf",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR), header=F)
colnames(sites)<-c("chromo", "position", "major", "minor")

#read pop file
print(POP)
pop<-read.table(POP, header=F)
npop<-dim(pop)[1]
pop_group<-"pop" #unlist(strsplit(unlist(strsplit(POP,"/"))[2],".txt"))


#join by chromoome and position the sites and the frequencies in each population
print("join by chromoome and position the sites and the frequencies in each population")
MAFall<-sites
for (i in 1:npop)
  {
    pi<-pop[i,1]
    MAFi<-read.delim(paste0(ANGSD_PATH,"/02_raw_data/",pi,"_maf",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".mafs"), header=T)
    MAFi<-MAFi[,c(1,2,6,7)]
    colnames(MAFi)<-c("chromo", "position", paste("freq", pi, sep=""),paste("n", pi, sep=""))
    head(MAFi)
    MAFall<-left_join(MAFall, MAFi, by=c("chromo", "position"))
}
head(MAFall)
nSNP<-dim(MAFall)[1]
print(paste("total nb of snp for which we ran the analysis = ", dim(MAFall)[1]))
print(paste("total nb of pop for which we ran the analysis = ", (dim(MAFall)[2]-4)/2))

which (MAFall=="NA")
#select the position which are not NA
MAFall<-MAFall[which((rowSums(MAFall[,5:dim(MAFall)[2]])>=0)),]

nSNP_no_na<-dim(MAFall)[1]
print(paste("total nb of snp kept because they were covered in all populations by the chosen % of ind = ", dim(MAFall)[1]))

write.table(MAFall, paste0("02_raw_data/by_",pop_group,"_",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".mafs"), quote=F, sep=" ")
#write the list of SNP infered in all populations
write.table(MAFall[,1:4], paste0("02_raw_data/by_",pop_group,"_",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".snps"), quote=F, sep=" ")



#format for RDA & lfmm & FLK
#row are snp
#col are pop
print("format for rda/lfmm/flk")
freq_col<-seq(5,(3+npop*2), by=2)
maf_matrix<-(MAFall[,freq_col])
colnames(maf_matrix)<-pop[,1]
rownames(maf_matrix)<-paste(MAFall$chromo, MAFall$position, sep="_")
head(maf_matrix)

#for lfmm
write.table(t(maf_matrix), paste0("04_lfmm/by_",pop_group,"_",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".lfmm"), quote=F, row.names = F, col.names = F)

#for FLK add colnames
write.table(maf_matrix, paste0("05_flk/by_",pop_group,"_",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".mafs.flkT"), quote=F, row.names = F)
#we would need also a matrix of reynolds distances? see ld-pruned methods, removing outliers,e tc

#for rda add rownames
write.table(maf_matrix, paste0("03_rda/by_",pop_group,"_",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".mafs.rda"), quote=F)


#for Baypass
#row are snp
#col are pop (2 col per pop separated by a space, with nAllele M, nAllele m)
print("format for baypass")
BayPass_matrix<-matrix(ncol=(npop*2), nrow=nSNP_no_na)
for (i in 1:npop)
	{
	BayPass_matrix[,(2*i-1)]<- round(MAFall[,4+(2*i-1)]*2*MAFall[,5+(2*i-1)],0)
	BayPass_matrix[,(2*i)]<- round((1-MAFall[,4+(2*i-1)])*2*MAFall[,5+(2*i-1)],0)
	}
head(BayPass_matrix)
write.table(BayPass_matrix, paste0("06_baypass/by_",pop_group,"_",MIN_MAF,"_pctind",PERCENT_IND,"_maxdepth",MAX_DEPTH_FACTOR,".mafs.baypass"), quote=F, row.names = F, col.names = F)

##I have somewhere a script to prepare the maf matrix for bayescan but bayescan is just too long to run on so many snps.
```

### run baypass basic

```sh
cat 06_baypass.sh

#!/bin/bash

# no control
/workdir/hz269/DelBay_all_angsd/13_env_gen_association/baypass_2.2/sources/g_baypass -npop 5 -gfile 06_baypass/by_pop_0.05_pctind0.7_maxdepth3.mafs.baypass -outprefix 06_baypass/by_pop_0.05_pctind0.7_maxdepth3.mafs.baypass.output -nthreads 8
```

### run baypass with control on population structure

Best practices suggest to first run baypass on the LD-pruned vcf and to extract the covariance matrix between population (mat_omega), and then use it as a covariate in the baypass model.





